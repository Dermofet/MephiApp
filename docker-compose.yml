version: "3.8"
name: "mephiapp"
services:
  db:
    container_name: db
    image: bitnami/postgresql:15.4.0
    restart: always
    volumes:
      - app-db-data:/bitnami/postgresql
    environment:
      POSTGRESQL_USERNAME: ${POSTGRES_USER}
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRESQL_DATABASE: ${POSTGRES_DB}
    ports:
      - "${LOCAL_POSTGRES_PORT}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    restart: always
    depends_on:
      - db
    volumes:
      - ./backend/:/mephiapp-backend/backend/
      - ./config/:/mephiapp-backend/config/
      - ./logging_/:/mephiapp-backend/logging_/
      - ./etl/:/mephiapp-backend/etl/
      - ./utils/:/mephiapp-backend/utils/
    ports:
      - "8000:${BACKEND_PORT}"
    environment:
      DEBUG: ${DEBUG}
      BACKEND_TITLE: ${BACKEND_TITLE}
      BACKEND_DESCRIPTION: ${BACKEND_DESCRIPTION}
      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_SERVER: ${POSTGRES_SERVER}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      ENV: development
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`acm-mephi.site`) && Path(`/api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"

  traefik:
    container_name: traefik
    image: traefik:v2.10
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yaml:/etc/traefik/traefik.yaml

  celery:
    container_name: celery
    build:
      context: .
      dockerfile: ./celery_conf/Dockerfile
    restart: always
    depends_on:
      - db
      - rabbitmq
      - redis
    volumes:
      - ./celery_conf:/mephiapp-celery/celery_conf
      - ./config/:/mephiapp-celery/config
      - ./logging_/:/mephiapp-celery/logging_
      - ./etl/:/mephiapp-celery/etl
      - ./backend/:/mephiapp-celery/backend
      - ./utils/:/mephiapp-celery/utils
    ports:
      - "9000:9000"
    environment:
      BEAT_CELERY_NAME: ${BEAT_CELERY_NAME}

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.12
    restart: always
    ports:
      - "5672:5672"
    environment:
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbit disk_free_limit 2147483648

  redis:
    container_name: redis
    image: bitnami/redis:6.2.13
    restart: always
    ports:
      - "${LOCAL_REDIS_PORT}:${REDIS_PORT}"
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT_NUMBER: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
      REDIS_PASSWORD: ${REDIS_PASSWORD}

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: always
    ports:
      - 3003:3000
    volumes:
      - grafana_data:/var/lib/grafana

volumes:
  app-db-data:
  grafana_data:
