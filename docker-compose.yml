version: "3.8"
services:
  db:
    container_name: db
    image: postgres:15.1
    volumes:
      - app-db-data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d schedule" ]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    container_name: backend
    build:
      context: .
    depends_on:
      - db
    volumes:
      - .:/app
    ports:
      - "8000:${BACKEND_PORT}"
    environment:
      DEBUG: ${DEBUG}

      BACKEND_TITLE: ${BACKEND_TITLE}
      BACKEND_DESCRIPTION: ${BACKEND_DESCRIPTION}
      BACKEND_PREFIX: ${BACKEND_PREFIX}

      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
      BACKEND_RELOAD: ${BACKEND_RELOAD}

      POSTGRES_SERVER: ${POSTGRES_SERVER}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

      ENV: development
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fastapi.rule=Host(`${BACKEND_LOCALHOST}`)"
    networks:
      - app-network

  traefik:
    image: traefik:v2.2
    ports:
      - "8008:80"
    networks:
      - app-network
    volumes:
      - "./traefik.dev.toml:/etc/traefik/traefik.toml"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  pgadmin:
    container_name: pgadmin4
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"
    networks:
      - app-network

#  rabbitmq:
#    container_name: rabbitmq
#    image: rabbitmq:3.10.7-management
#    ports:
#      - "5672:5672"
#      - "15672:15672"
#    networks:
#      - app-network
#
#  celery:
#    container_name: celery
#    build:
#      context: 'celery_parsing'
#    volumes:
#      - .:/app/celery_parsing
#    depends_on:
#      - rabbitmq
#      - db
#    environment:
#      C_FORCE_ROOT: ${C_FORCE_ROOT}
#      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
#    networks:
#      - app-network

volumes:
  app-db-data:

networks:
  app-network: